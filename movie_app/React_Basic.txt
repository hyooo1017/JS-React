<< #1.2 React >>
- react application에서 자바스크립트와 함께 만들어진 요소들을 HTML div(id 일치하는) 사이로 밀어넣음
	-> ReactDOM이 index.js에서 document.getElementById("")로 해당 id 위치에 App을 렌더함
		(리액트를 사용하면 Web(F12/Sources)에서 기본적인 HTML파일만 확인되고 리액트로 구성된 요소들은 확인할 수 없음)
- 리액트는 소스코드에 처음부터 HTML을 넣지 않고 기본 제공되는 index.html에 추가하거나 제거함
	-> 웹페이지를 열 때, 빈 HTML을 로드하고 그 후에 리액트가 컴포넌트를 작성해두었던 HTML을 밀어넣음
		(리액트 속도가 빠른 이유)
- virtual DOM(virtual document object model) : 존재하지 않는(소스코드에 보이지 않으므로) DOM



<< #2.0 Component(컴포넌트) >>
* 컴포넌트는 HTML을 반환하는 함수(ex. App.js의 App함수)
- ReactDOM.render(<~~~ />,~~);에서 <~~~ />가 컴포넌트에 해당됨 (JSX - 자바스크립트와 HTML의 조합, 리액트에 특화된 개념)
- 리액트는 컴포넌트로 동작됨 (데이터를 보여주는 역할도 수행)

>> in JS 파일 <<
- React를 import하지 않으면 JSX가 있는 컴포넌트를 사용하는 것을 이해하지 못함
- 함수 이름은 대문자로 시작
- 함수를 export하지 않으면 아무도 이 컴포넌트를 사용하지 않음 (ex. Potato.js의 export default Potato;)
** 이 컴포넌트를 index.js에서 <App /> 옆에 호출하면 에러발생!!
	-> App을 이미 렌더하고 있기 때문에(하나의 컴포넌트만 렌더할 수 있음)
-> App 내부에 Potato를 넣어서 렌더하면 OK!

### react application은 한 번에 하나의 컴포넌트만 render할 수 있다 ###
=> 모든 것은 application 안에 들어가야 함
==> application 안에 많은 컴포넌트를 넣을 수 있음
===> 이러한 컴포넌트 안에 더 많은 컴포넌트를 import할 수 있음


<< #2.1 JSX >>
- 자바스크립트 안의 HTML
- 컴포넌트에 정보를 보낼 수 있음
- 재사용 가능한 컴포넌트를 만들 수 있음 (컴포넌트를 반복해서 사용할 수 있음)
** 컴포넌트 -> 컴포넌트 (자식 컴포넌트로) 정보를 보내는 방법
	1. App 컴포넌트에서 <Food fav="kimchi"/> 형식으로 (prop fav가 kimchi인)데이터를 보냄
		(Food 컴포넌트에 fav라는 이름의 property(이하 props)를 kimchi라는 value로 넘김)
		(text, boolean, array 등 다양한 형태의 데이터 넘길 수 있음)
	2. Food 컴포넌트에서 props(받은 데이터)를 인자로 받음
		(props의 내부에서 바로 fav 가져올 수 있음)


<< #2.2 map >
- array의 각 item에서 array를 반환하는 함수를 실행하는 자바스크립트 함수
	(ex 1)
		const friends = ["min", "yul", "jun", "eun"]
		friends.map(friend => {
			return friend + "♥";
		})
		▶ (4) ["min♥", "yul♥", "jun♥", "eun♥"]
=> array의 각 item에 함수 적용
==> 함수에 array를 전달
===> 따라서 map은 array를 취하고 원하는 array를 반환


<< #2.3 map2 >>
	(ex 2)
		function Food({ name, picture }){
			return (
				<div>
					<h2>I like {name}</h2>
					<img src={picture} alt={name}/>
				</div>
			);
		}
		function renderFood(dish){
			return <Food name={dish.name} picture={dish.image} />
		}
		const foodILike = [
			{
				name: "Kimchi",
				image: "..."
			},
			{
				name: "Samgyeopsal",
				image: "..."
			},
			{
				name: "Bibimbap",
				image: "..."
			},
			{
				name: "Doncatsu",
				image: "..."
			},
			{
				name: "Kimbap",
				image: "..."
			},
		]
		function App() {
			return (
				<div>
					{console.log(foodILike.map(renderFood))}
					{foodILike.map(renderFood)}
				</div>
			);
		}
		▼(5) [{…}, {…}, {…}, {…}, {…}]
		    ▶0: {$$typeof: Symbol(react.element), key: null, ref: null, props: {…}, type: ƒ, …} 
=> 기본적인 리액트 컴포넌트들을 array형식으로 확인할 수 있음
=> 이미지 요소는 alt prop이 반드시 있어야 함(이미지가 보이지 않을 때를 위한 대체 텍스트 지정)

>> in Web console <<
Warning: Each child in a list should have a unique "key" prop.
=> 리액트의 모든 element들은 유일해야 하는데 리스트에 담기면서 유일성을 잃어버림
==> foodILike의 item에 각각의 ID 추가
===> props에 key={dish.id} 추가(Food 컴포넌트에는 전달되지 않음 - 리액트 내부에서 사용)


<< #2.4 PropTypes >>
1. foodILike 배열객체 안에 rating(숫자) 추가
2. props에 rating 추가, Food함수의 인자 및 내용 추가
3. npm i prop-types
	-> prop-types는 내가 전달받은 props가 내가 원하는 props인지 확인
4. import PropTypes from 'prop-types';
5. (ex) // 내가 얻고 싶은 props에 대한 설명을 적음
		Food.propTypes = {
			name: PropTypes.string.isRequired,
			picture: PropTypes.string.isRequired,
			rating: PropTypes.number.isRequired,
		}
		=> props의 value 이름을 잘못 작성했다던지, 타입이 잘못되면 웹 콘솔(Warning)에서 확인 가능
		==> isRequired를 체크하지 않는다면 foodILike의 item에 해당 값이 필수가 아니라는 의미를 갖음
			(ex)
				const foodILike = [
					{
						id: 1,
						name: "Kimchi",
						image: "..."
					},
					{
						id: 2,
						name: "Samgyeopsal",
						image: "...",
						rating: 4.5
					},
					...
				]
				
				Food.propTypes = {
					name: PropTypes.string.isRequired,
					picture: PropTypes.string.isRequired,
					rating: PropTypes.number,
				}
				===> 첫 번째 item에 rating에 대한 값이 없지만 OK(rating이 isRequired로 체크되어 있지 않아서 필수값이 아니므로)
		====> https://ko.reactjs.org/docs/typechecking-with-proptypes.html에서 PropTypes에 대한 더 다양한 활용법 확인 가능


<< #3.0 Class Component >>
- function App(){}은 함수 컴포넌트
- class App extends React.Component{}는 클래스 컴포넌트
	(App클래스는 React클래스로부터  컴포넌트로부터 모든 것을 가져옴)
	=> return 대신 render 메소드를 사용
* Function 컴포넌트, Class 컴포넌트의 show 차이
	=> Function 컴포넌트는 값을 return하여 show
	==> Class 컴포넌트는 react컴포넌트로부터 확장되고 render 메소드로 show
		(react는 자동으로 모든 class 컴포넌트의 render 메소드 실행)


<< #3.0 State >>
- state는 객체이고 값이 변하는 컴포넌트의 데이터를 넣을 공간이 있음
	=> 컴포넌트의 데이터를 바꾸기 위해 state 사용
- render 메소드 내에서는 this.state.~value_name~형태로 state 객체의 value 데이터 사용
(ex)
	// 함수 사용 -> 자바스크립트 코드(리액트 코드 아님)
	add = () => {
		console.log("Add");
	};
	render(){
		return (
			<div>
				<h1>The number is :  {this.state.count}</h1>
				<button onClick={this.add}>Add</button>
				<button onClick={this.minus}>Minus</button>
			</div>
		)
	}
	=>리액트에서는 button에 onClick prop 기본 제공
	==> 즉시 함수 호출하는 것이 아닌 버튼을 클릭했을 때만 함수가 호출되기 원하므로 this.add()가 아닌 this.add로 사용


<< #3.1 Update state >>
- << #3.0 State >>(ex)의 add함수에서 this.state.count = 1;과 같이 state를 직접 변경하려 하면 아무 동작도 일어나지 않음
	-> 리액트가 render 메소드를 refresh하지 않기 때문에
- setState()를 호출할 때마다 리액트는 새로운 state로 render 메소드 호출
-> 버튼을 누를 때마다 리액트는 변화가 있는 부분만 업데이트함(ReactDOM이 있기 때문에 리액트는 매우 빠르게 변경하고 깜박임도 없음)
** this.setState({ count: this.state.count + 1 });보다는 this.setState(current => ({ count: current.count + 1 }));으로
	state를 변경하는 것이 리액트에서 외부의 상태에 의존하지 않는 가장 좋은 방법


<< #3.2 Component Life Cycle >>
- 리액트 컴포넌트에서 사용하는 유일한 함수는 render 함수
- 리액트 class 컴포넌트는 render외에 life cycle 메소드를 갖고 있음
* Life Cycle 메소드는 기본적으로 리액트가 컴포넌트를 생성하고 없애는 방법

### 컴포넌트가 생성될 때, render하기 전에 호출되는 함수가 있고 컴포넌트가 render된 후 호출되는 함수가 있음 ###
1. Mounting
(1) constructor() : 자바스크립트에서 class를 만들 때 호출됨
	-> 컴포넌트가 mount될 때/화면에 표시될 때/내 Website에 갈 때 constructor 호출
(2) render()
(3) componentDidMount()
	(ex)
		componentDidMount(){
			console.log("component rendered") 
		}
		render(){
			console . log("I'm redering")
			return (
				...
			)
		}
	▷ I'm redering				App.js:23
	▷ component rendered	 		App.js:19

2. Updating (setState가 호출할 때마다 발생)
	(ex)
		add = () => {
			this.setState(current => ({ count: current.count + 1 }));
		};
		minus = () => {
			this.setState(current => ({ count: current.count - 1 }));
		};
	-> add/minus 버튼을 클릭해서 state를 변경하는 것이 UPDATE
(1) render()
(2) componentDidUpdate()
	(ex)
		componentDidUpdate(){
			console.log("I just updated");
		}
		// 내가 버튼을 누를 때마다 아래의 콘솔내용 확인 가능
	▷ I'm redering				App.js:27
	▷ I just updated				App.js:23
	=> setState를 호출
	==> 컴포넌트 호출
	===> render 호출 (update 완료)
	====> componentDidUpdate() 실행

3. Unmounting (컴포넌트가 죽는 걸 의미)
- componentWillUnmount()


<< #3.3 >>
- render함수에서 항상 this.state.isLoading으로 작성하지 않아도 되도록
	const { isLoading } = this.state; 작성
- 자바스크립트 삼항 연산자
	(ex) {isLoading ? "Loading..." : "We are ready"}
		-> isLoading이 true면 "Loading..." 출력, false면 "We are ready" 출력

@@ IF @@ state에 뭔가 추가하면 에러가 생길까?
(ex)
	state = {
		isLoading: true,
		movies: []					// movies 배열 추가
	}
	componentDidMount(){
		// timeout은 자바스크립트 함수
		setTimeout(() => {
			this.setState({ isLoading: false, book: true });	// book: true 추가
		}, 6000);
	}
	-> 에러 발생하지 않음 (미래에 쓰고자하는 state를 선언하는 것은 필수가 아님)
	--> state 추가하는 것은 자유
	---> setState를 사용할 때 state 안에 디폴트 값들을 선언할 필요 없음


<< #4.0 Fetching Data (데이터 가져오기) >>
- fetch()로 데이터 가져오기
- axios는 마치 fetch 위에 있는 작은 layer
	-> axios를 사용하기 위해 설치 (npm i axios)
- axios로 가져오는 데이터 담기
(ex)
	getMovies = () => {
		const movies = axios.get("https://yts-proxy.now.sh/list_movies.json");
	}
	componentDidMount(){
		this.getMovies();
	}
	* axios.get은 항상 빠르지 않음
		=>자바스크립트에게 componentDidMount 함수가 끝날 때까지 약간 시간이 걸릴 수 있다고 말하고 기다려야 함)
		==> getMovies함수 수정
			getMovies = async() => {
				const movies = await axios.get("https://yts-proxy.now.sh/list_movies.json");
			}
			=> getMovies함수가 비동기니까 기다려야 한다는 의미의 코드(async, await) 추가 (async가 없으면 await할 수 없음)
			==> axios가 끝날 때까지 기다렸다가 계속 수행


<< #4.1 >>
=> 웹 콘솔에서 axios가 가져온 데이터 확인 후 movies가 아닌 {data: {data: { movies }}}로 데이터가 있는 array에 바로 접근
==> setState로 movies리스트에 axios로 가져온 데이터 담기
	-> this.setState({ movies })로 작성해도 {movies: movies}와 같은 의미
===> state로부터 movies를 받아오기 위해 const { movies } = this.state; 도 작성
====> Movie.js 작성
		(ex)
			import React from 'react';
			import PropTypes from 'prop-types';
			
			function Movie({ id, year, title, summary, poster }){
				return <h5>{ title }</h5>
			}
			
			Movie.propTypes = {
				id: PropTypes.number.isRequired,
				year: PropTypes.number.isRequired,
				title: PropTypes.string.isRequired,
				summary: PropTypes.string.isRequired,
				poster: PropTypes.string.isRequired
			}
			
			export default Movie;
=====> map을 활용하여 Movie.js 렌더 (** map은 항상 return해주어야 함)
======> import Movie.js
=======> map 함수 작성 (props로 value 넘기기)
			(ex)
				movies.map(movie => (
					< Movie 
						key={movie.id}
						id={movie.id}
						year={movie.year}
						title={movie.title}
						summary={movie.summary}
						poster={movie.medium_cover_image}
					/>
				))











